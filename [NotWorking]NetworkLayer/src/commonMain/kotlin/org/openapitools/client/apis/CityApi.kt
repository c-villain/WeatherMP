/**
* City
* Cities
*
* The version of the OpenAPI document: 1.0.0
* Contact: lexkraev@gmail.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.City
import org.openapitools.client.models.WeatherNewsList

import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import kotlinx.serialization.UnstableDefault
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.internal.StringDescriptor

class CityApi @UseExperimental(UnstableDefault::class) constructor(
        baseUrl: kotlin.String = "https://virtserver.swaggerhub.com/c-villain/City/1.0.0",
        httpClientEngine: HttpClientEngine? = null,
        serializer: KotlinxSerializer)
    : ApiClient(baseUrl, httpClientEngine, serializer) {

    @UseExperimental(UnstableDefault::class)
    constructor(
        baseUrl: kotlin.String = "https://virtserver.swaggerhub.com/c-villain/City/1.0.0",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Default)
    : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
    * Search city
    * 
    * @param query name of city 
    * @return kotlin.Array<City>
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun searchCity(query: kotlin.String) : HttpResponse<kotlin.Array<City>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        query?.apply { localVariableQuery["query"] = listOf("$query") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/search/",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SearchCityResponse>().map { value.toTypedArray() }
    }

    @Serializable
private class SearchCityResponse(val value: List<City>) {
    @Serializer(SearchCityResponse::class)
    companion object : KSerializer<SearchCityResponse> {
        private val serializer: KSerializer<List<City>> = City.serializer().list
            override val descriptor = StringDescriptor.withName("SearchCityResponse")
            override fun serialize(encoder: Encoder, obj: SearchCityResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SearchCityResponse(serializer.deserialize(decoder))
    }
}

    /**
    * Get weather by Earth ID
    * 
    * @param woeid Where On Earth ID 
    * @return WeatherNewsList
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun weatherOnEarthID(woeid: kotlin.Int) : HttpResponse<WeatherNewsList> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/{woeid}".replace("{"+"woeid"+"}", "$woeid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    companion object {
        internal fun setMappers(serializer: KotlinxSerializer) {
            serializer.setMapper(SearchCityResponse::class, SearchCityResponse.serializer())
        }
    }
}
